ui <- fluidPage(
titlePanel("Air Quality Dashboard"),
sidebarLayout(
sidebarPanel(
selectInput("country", "Choose a Country:",
choices = unique(air_quality_data$country)),
selectInput("metric", "Choose a Metric:",
choices = c("Value" = "value")),
sliderInput("years", "Select Year Range:",
min = min(year(air_quality_data$date.local)),
max = max(year(air_quality_data$date.local)),
value = c(min(year(air_quality_data$date.local)), max(year(air_quality_data$date.local)))
),
mainPanel(
plotOutput("linePlot")
)
)
)
# Define server logic
server <- function(input, output) {
install.packages("httr")
install.packages("jsonlite")
install.packages("tidyverse")
library(httr)
library(jsonlite)
library(tidyverse)
# Define the API endpoint and parameters
url <- "https://api.openaq.org/v1/measurements"
params <- list(
parameter = "pm25",
date_from = "2015-01-01",
date_to = "2023-01-01",
limit = 10000  # Adjust the limit as needed
)
# Make the API request
response <- GET(url, query = params)
# Parse the JSON data
json_data <- content(response, "text")
data_list <- fromJSON(json_data, flatten = TRUE)
# Extract the results into a data frame
df <- as.data.frame(data_list$results)
# Optionally, select only the columns you're interested in
selected_df <- df %>% select(date.local, location, value, unit, country)
# Save to CSV
write.csv(selected_df, "air_quality_data.csv")
install.packages("httr")
# Load libraries
library(shiny)
library(ggplot2)
library(lubridate)
# Define UI for application
ui <- fluidPage(
titlePanel("Air Quality Dashboard"),
sidebarLayout(
sidebarPanel(
selectInput("country", "Choose a Country:", ""),
selectInput("metric", "Choose a Metric:", choices = "Value"),
sliderInput("years", "Select Year Range:", min = 0, max = 1, value = c(0, 1))
),
mainPanel(
plotOutput("linePlot")
)
)
)
# Define server logic
server <- function(input, output, session) {
# Load the CSV file
air_quality_data <- read.csv("air_quality_data.csv")
air_quality_data$date.local <- ymd(air_quality_data$date.local)  # Convert to Date object
# Update UI based on loaded data
updateSelectInput(session, "country", choices = unique(air_quality_data$country))
updateSliderInput(session, "years", min = min(year(air_quality_data$date.local)), max = max(year(air_quality_data$date.local)), value = c(min(year(air_quality_data$date.local)), max(year(air_quality_data$date.local))))
output$linePlot <- renderPlot({
# Filter data based on user input
filtered_data <- subset(air_quality_data, country == input$country)
filtered_data <- subset(filtered_data, year(date.local) >= input$years[1] & year(date.local) <= input$years[2])
# Generate plot
ggplot(filtered_data, aes(x = date.local, y = value)) +
geom_line() +
ggtitle(paste("Air Quality in", input$country, "Over Time")) +
xlab("Date") +
ylab("Value")
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(dplyr)
library(lubridate)
# User Interface
ui <- fluidPage(
titlePanel("Air Quality Dashboard"),
sidebarLayout(
sidebarPanel(
selectInput("countryInput", "Select Country:", ""),
sliderInput("yearInput", "Select Year Range:", 0, 100, c(0, 100))
),
mainPanel(
plotOutput("airQualityPlot")
)
)
)
# Server logic
server <- function(input, output, session) {
# Load data
data <- read.csv("air_quality_data.csv")
data$date.local <- ymd(data$date.local) # convert to Date
# Update country selection dynamically
updateSelectInput(session, "countryInput", choices = unique(data$country))
# Update year slider dynamically
updateSliderInput(session, "yearInput",
min = min(year(data$date.local)),
max = max(year(data$date.local)),
value = c(min(year(data$date.local)), max(year(data$date.local))))
# Create the plot
output$airQualityPlot <- renderPlot({
# Filter data based on selections
filtered_data <- data %>%
filter(country == input$countryInput,
year(date.local) >= input$yearInput[1],
year(date.local) <= input$yearInput[2])
# Create ggplot
ggplot(filtered_data, aes(x = date.local, y = value)) +
geom_line() +
ggtitle(paste("Air Quality in", input$countryInput)) +
xlab("Date") +
ylab("Value")
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(dplyr)
library(lubridate)
# User Interface
ui <- fluidPage(
titlePanel("Air Quality Dashboard"),
sidebarLayout(
sidebarPanel(
selectInput("countryInput", "Select Country:", ""),
sliderInput("yearInput", "Select Year Range:", 0, 100, c(0, 100))
),
mainPanel(
plotOutput("airQualityPlot")
)
)
)
# Server logic
server <- function(input, output, session) {
# Load data
data <- read.csv("air_quality_data.csv")
data$date.local <- ymd(data$date.local) # convert to Date
# Update country selection dynamically
updateSelectInput(session, "countryInput", choices = unique(data$country))
# Update year slider dynamically
updateSliderInput(session, "yearInput",
min = min(year(data$date.local)),
max = max(year(data$date.local)),
value = c(min(year(data$date.local)), max(year(data$date.local))))
# Create the plot
output$airQualityPlot <- renderPlot({
# Check if input$yearInput exists and is not empty
if(is.null(input$yearInput) || length(input$yearInput) == 0) {
return(NULL)  # Return NULL to prevent plot from rendering
}
# Filter data based on selections
filtered_data <- data %>%
filter(country == input$countryInput,
year(date.local) >= input$yearInput[1],
year(date.local) <= input$yearInput[2])
# Create ggplot only if filtered_data is not empty
if(nrow(filtered_data) > 0) {
ggplot(filtered_data, aes(x = date.local, y = value)) +
geom_line() +
ggtitle(paste("Air Quality in", input$countryInput)) +
xlab("Date") +
ylab("Value")
}
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(dplyr)
library(lubridate)
# User Interface
ui <- fluidPage(
titlePanel("Air Quality Dashboard"),
sidebarLayout(
sidebarPanel(
selectInput("countryInput", "Select Country:", ""),
sliderInput("yearInput", "Select Year Range:", 0, 100, c(0, 100))
),
mainPanel(
plotOutput("airQualityPlot")
)
)
)
# Server logic
server <- function(input, output, session) {
# Load data
data <- read.csv("air_quality_data.csv")
data$date.local <- ymd_hms(data$date.local) # convert to DateTime
# Update country selection dynamically
updateSelectInput(session, "countryInput", choices = unique(data$country))
# Update year slider dynamically
updateSliderInput(session, "yearInput",
min = min(year(data$date.local)),
max = max(year(data$date.local)),
value = c(min(year(data$date.local)), max(year(data$date.local))))
# Create the plot
output$airQualityPlot <- renderPlot({
# Check if input$yearInput exists and is not empty
if(is.null(input$yearInput) || length(input$yearInput) == 0) {
return(NULL)  # Return NULL to prevent plot from rendering
}
# Filter data based on selections
filtered_data <- data %>%
filter(country == input$countryInput,
year(date.local) >= input$yearInput[1],
year(date.local) <= input$yearInput[2])
# Create ggplot only if filtered_data is not empty
if(nrow(filtered_data) > 0) {
ggplot(filtered_data, aes(x = date.local, y = value)) +
geom_line() +
ggtitle(paste("Air Quality in", input$countryInput)) +
xlab("Date") +
ylab("Value")
}
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(dplyr)
library(lubridate)
# User Interface
ui <- fluidPage(
titlePanel("Air Quality Dashboard"),
sidebarLayout(
sidebarPanel(
selectInput("countryInput", "Select Country:", ""),
sliderInput("yearInput", "Select Year Range:", 0, 100, c(0, 100))
),
mainPanel(
plotOutput("airQualityPlot")
)
)
)
# Server logic
server <- function(input, output, session) {
# Load data
data <- read.csv("air_quality_data.csv")
if ("date.local" %in% names(data)) {
data$date.local <- ymd_hms(data$date.local)  # convert to DateTime
} else {
stop("date.local column not found")
}
# Check if data is loaded
if (nrow(data) == 0) {
stop("Data not loaded.")
}
# Update country selection dynamically
observe({
updateSelectInput(session, "countryInput", choices = unique(data$country))
})
# Update year slider dynamically
observe({
min_year <- min(year(data$date.local))
max_year <- max(year(data$date.local))
updateSliderInput(session, "yearInput", min = min_year, max = max_year, value = c(min_year, max_year))
})
# Create the plot
output$airQualityPlot <- renderPlot({
# Check if input exists
if (is.null(input$countryInput) || is.null(input$yearInput)) {
return(NULL)
}
# Filter data
filtered_data <- data %>%
filter(country == input$countryInput,
year(date.local) >= input$yearInput[1] & year(date.local) <= input$yearInput[2])
# Plotting
if (nrow(filtered_data) > 0) {
ggplot(filtered_data, aes(x = date.local, y = value)) +
geom_line() +
ggtitle(paste("Air Quality in", input$countryInput)) +
xlab("Date") +
ylab("Value")
}
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(dplyr)
library(lubridate)
# Sample Data
# Make sure to replace this with your actual dataset
data <- data.frame(
date.local = ymd_hms("2022-01-01 12:34:56", "2022-01-02 12:34:56"),
country = c("USA", "USA"),
value = c(10, 20)
)
# UI
ui <- fluidPage(
titlePanel("Air Quality"),
sidebarLayout(
sidebarPanel(
selectInput("country", "Choose a country:", choices = unique(data$country)),
sliderInput("year_range", "Choose a year range:",
min = min(year(data$date.local)),
max = max(year(data$date.local)),
value = c(min(year(data$date.local)), max(year(data$date.local)))
),
mainPanel(
plotOutput("linePlot")
)
)
)
# Server
server <- function(input, output, session) {
library(shiny)
library(ggplot2)
library(dplyr)
library(lubridate)
# Sample Data
# Make sure to replace this with your actual dataset
data <- data.frame(
date.local = ymd_hms("2022-01-01 12:34:56", "2022-01-02 12:34:56"),
country = c("USA", "USA"),
value = c(10, 20)
)
# UI
ui <- fluidPage(
titlePanel("Air Quality"),
sidebarLayout(
sidebarPanel(
selectInput("country", "Choose a country:", choices = unique(data$country)),
sliderInput("year_range", "Choose a year range:",
min = min(year(data$date.local)),
max = max(year(data$date.local)),
value = c(min(year(data$date.local)), max(year(data$date.local)))
)
),
mainPanel(
plotOutput("linePlot")
)
)
)
# Server
server <- function(input, output, session) {
# You will fill this part with your server logic.
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(dplyr)
library(lubridate)
# Sample Data
data <- data.frame(
date.local = ymd_hms(c("2022-01-01 12:34:56", "2022-01-02 12:34:56", "2023-01-02 12:34:56")),
country = c("USA", "USA", "USA"),
value = c(10, 20, 30)
)
# UI
ui <- fluidPage(
titlePanel("Air Quality"),
sidebarLayout(
sidebarPanel(
selectInput("country", "Choose a country:", choices = unique(data$country)),
sliderInput("year_range", "Choose a year range:",
min = min(year(data$date.local)),
max = max(year(data$date.local)),
value = c(min(year(data$date.local)), max(year(data$date.local)))
)
),
mainPanel(
plotOutput("linePlot")
)
)
)
# Server
server <- function(input, output, session) {
output$linePlot <- renderPlot({
filtered_data <- data %>%
filter(country == input$country,
year(date.local) >= input$year_range[1],
year(date.local) <= input$year_range[2])
ggplot(filtered_data, aes(x = date.local, y = value)) +
geom_line() +
ggtitle(paste("Air Quality in", input$country)) +
xlab("Date") +
ylab("Value")
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(dplyr)
library(lubridate)
# Assuming 'data' is already loaded with your real dataset
# UI
ui <- fluidPage(
titlePanel("Air Quality"),
sidebarLayout(
sidebarPanel(
selectInput("country", "Choose a country:", choices = unique(data$country)),
sliderInput("year_range", "Choose a year range:",
min = min(year(data$date.local)),
max = max(year(data$date.local)),
value = c(min(year(data$date.local)), max(year(data$date.local)))
)
),
mainPanel(
plotOutput("linePlot")
)
)
)
# Server
server <- function(input, output, session) {
output$linePlot <- renderPlot({
filtered_data <- data %>%
filter(country == input$country,
year(date.local) >= input$year_range[1],
year(date.local) <= input$year_range[2])
ggplot(filtered_data, aes(x = date.local, y = value)) +
geom_line() +
ggtitle(paste("Air Quality in", input$country)) +
xlab("Date") +
ylab("Value")
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(dplyr)
library(lubridate)
# Read CSV file into a data frame named 'data'
data <- read.csv("air_quality_data.csv", stringsAsFactors = FALSE)
# Make sure the date is in the correct format
data$date.local <- ymd_hms(data$date.local)
# UI
ui <- fluidPage(
titlePanel("Air Quality"),
sidebarLayout(
sidebarPanel(
selectInput("country", "Choose a country:", choices = unique(data$country)),
sliderInput("year_range", "Choose a year range:",
min = min(year(data$date.local)),
max = max(year(data$date.local)),
value = c(min(year(data$date.local)), max(year(data$date.local)))
)
),
mainPanel(
plotOutput("linePlot")
)
)
)
library(shiny)
library(ggplot2)
library(dplyr)
library(lubridate)
# Read CSV file into a data frame named 'data'
data <- read.csv("air_quality_data.csv", stringsAsFactors = FALSE)
# Make sure the date is in the correct format
data$date.local <- ymd_hms(data$date.local)
# UI
ui <- fluidPage(
titlePanel("Air Quality"),
sidebarLayout(
sidebarPanel(
selectInput("country", "Choose a country:", choices = unique(data$country)),
sliderInput("year_range", "Choose a year range:",
min = min(year(data$date.local), na.rm = TRUE),
max = max(year(data$date.local), na.rm = TRUE),
value = c(min(year(data$date.local), na.rm = TRUE), max(year(data$date.local), na.rm = TRUE))
)
),
mainPanel(
plotOutput("linePlot")
)
)
)
# Server
server <- function(input, output, session) {
output$linePlot <- renderPlot({
filtered_data <- data %>%
filter(country == input$country,
year(date.local) >= input$year_range[1],
year(date.local) <= input$year_range[2])
ggplot(filtered_data, aes(x = date.local, y = value)) +
geom_line() +
ggtitle(paste("Air Quality in", input$country)) +
xlab("Date") +
ylab("Value (µg/m³)")
})
}
# Run the application
shinyApp(ui = ui, server = server)
